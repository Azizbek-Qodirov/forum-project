definitions:
  genprotos.CategoryCReqForSwagger:
    properties:
      name:
        type: string
    type: object
  genprotos.CategoryCReqOrCResOrGResOrUReqOrURes:
    properties:
      category_id:
        type: string
      name:
        type: string
    type: object
  genprotos.CategoryGARes:
    properties:
      categories:
        items:
          $ref: '#/definitions/genprotos.CategoryCReqOrCResOrGResOrUReqOrURes'
        type: array
      count:
        type: integer
    type: object
  genprotos.CommentCReqForSwagger:
    properties:
      body:
        type: string
      post_id:
        type: string
    type: object
  genprotos.CommentCReqOrCResOrGResOrURes:
    properties:
      body:
        type: string
      comment_id:
        type: string
      post_id:
        type: string
      user_id:
        type: string
    type: object
  genprotos.CommentGARes:
    properties:
      comments:
        items:
          $ref: '#/definitions/genprotos.CommentCReqOrCResOrGResOrURes'
        type: array
      count:
        type: integer
    type: object
  genprotos.PostCReqForSwagger:
    properties:
      body:
        type: string
      category_id:
        type: string
      tags:
        type: string
      title:
        type: string
    type: object
  genprotos.PostCReqOrCResOrGResOrUResp:
    properties:
      body:
        type: string
      category_id:
        type: string
      post_id:
        type: string
      tags:
        type: string
      title:
        type: string
      user_id:
        type: string
    type: object
  genprotos.PostGARes:
    properties:
      count:
        type: integer
      posts:
        items:
          $ref: '#/definitions/genprotos.PostCReqOrCResOrGResOrUResp'
        type: array
    type: object
  genprotos.TagCReqOrCRes:
    properties:
      post_id:
        type: string
      tag:
        type: string
    type: object
  genprotos.TagGAResOrPopularRes:
    properties:
      tags:
        items:
          $ref: '#/definitions/genprotos.TagCReqOrCRes'
        type: array
    type: object
info:
  contact: {}
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categories
      parameters:
      - description: category_id
        in: query
        name: category_id
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.CategoryGARes'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all categories
      tags:
      - category
  /category:
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/genprotos.CategoryCReqForSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.CategoryCReqOrCResOrGResOrUReqOrURes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create category
      tags:
      - category
  /category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category  by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category  deleted
          schema:
            type: string
        "400":
          description: Invalid category  ID
          schema:
            type: string
        "404":
          description: Category  not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete category
      tags:
      - category
    get:
      consumes:
      - application/json
      description: Get a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.CategoryCReqOrCResOrGResOrUReqOrURes'
        "400":
          description: Invalid category  ID
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get category
      tags:
      - category
    put:
      consumes:
      - application/json
      description: Update an existing category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated category data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/genprotos.CategoryCReqForSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.CategoryCReqOrCResOrGResOrUReqOrURes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Category not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update category
      tags:
      - category
  /comment:
    post:
      consumes:
      - application/json
      description: Create a new comment
      parameters:
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/genprotos.CommentCReqForSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.CommentCReqOrCResOrGResOrURes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create comment
      tags:
      - comment
  /comment/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment  by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Comment  deleted
          schema:
            type: string
        "400":
          description: Invalid comment  ID
          schema:
            type: string
        "404":
          description: Comment  not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete comment
      tags:
      - comment
    get:
      consumes:
      - application/json
      description: Get a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.CommentCReqOrCResOrGResOrURes'
        "400":
          description: Invalid comment  ID
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get comment
      tags:
      - comment
    put:
      consumes:
      - application/json
      description: Update an existing comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/genprotos.CommentCReqForSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.CommentCReqOrCResOrGResOrURes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Comment not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update comment
      tags:
      - comment
  /comments:
    get:
      consumes:
      - application/json
      description: Get all comments
      parameters:
      - description: user_id
        in: query
        name: user_id
        type: string
      - description: post_id
        in: query
        name: post_id
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.CommentGARes'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all comments
      tags:
      - comment
  /popular-tags:
    get:
      consumes:
      - application/json
      description: Gets popular tags
      parameters:
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.TagGAResOrPopularRes'
        "400":
          description: Invalid tag  ID
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get Popular tags
      tags:
      - tag
  /post:
    post:
      consumes:
      - application/json
      description: Create a new post
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/genprotos.PostCReqForSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.PostCReqOrCResOrGResOrUResp'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create post
      tags:
      - post
  /post/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post  by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Post  deleted
          schema:
            type: string
        "400":
          description: Invalid post  ID
          schema:
            type: string
        "404":
          description: Post  not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete post
      tags:
      - post
    get:
      consumes:
      - application/json
      description: Get a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.PostCReqOrCResOrGResOrUResp'
        "400":
          description: Invalid post  ID
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get post
      tags:
      - post
    put:
      consumes:
      - application/json
      description: Update an existing post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/genprotos.PostCReqForSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.PostCReqOrCResOrGResOrUResp'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update post
      tags:
      - post
  /posts:
    get:
      consumes:
      - application/json
      description: Get all posts
      parameters:
      - description: user_id
        in: query
        name: user_id
        type: string
      - description: category_id
        in: query
        name: category_id
        type: string
      - description: title
        in: query
        name: title
        type: string
      - description: body
        in: query
        name: body
        type: string
      - description: tags
        in: query
        name: tags
        type: string
      - description: limit
        in: query
        name: limit
        type: integer
      - description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/genprotos.PostGARes'
        "400":
          description: Invalid parameters
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all posts
      tags:
      - post
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
